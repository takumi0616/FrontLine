@/src/FrontLine/main_v3/__init__.py
@/src/FrontLine/main_v3/main_v3_config.py
@/src/FrontLine/main_v3/main_v3_datasets.py
@/src/FrontLine/main_v3/main_v3_evaluation.py
@/src/FrontLine/main_v3/main_v3_models.py
@/src/FrontLine/main_v3/main_v3_shap.py
@/src/FrontLine/main_v3/main_v3_stage1.py
@/src/FrontLine/main_v3/main_v3_stage2_diffusion.py
@/src/FrontLine/main_v3/main_v3_stage2_swin.py
@/src/FrontLine/main_v3/main_v3_stage3.py
@/src/FrontLine/main_v3/main_v3_stage4_svg.py
@/src/FrontLine/main_v3/main_v3_utils.py
@/src/FrontLine/main_v3/main_v3_visualize.py
@/src/FrontLine/main_v3.py

上記のプログラムを全て読んでください
私は現在前線の予測モデルの開発を行なっているのですが、予測において問題があります

それは削れたり膨れたり線ぽくなかったりと、前線を1種予測に出すならば滑らかな一本の線で書いて欲しいのに汚い前線ばかり出るということです
原因はピクセル単位の予測を行っているからだというのはわかっていますし、stage2において、歪な前線を人工データで作成して修正用のモデルにするという工程も行っていますが効果が限定的です

この前線としてルールを守っていないものを出力するというのは致命的な問題です
ルールはいろいろあるのですが、
なので、前線データにおいて固まった前線の種類を扱って、予測をする時はかたまりの前線を1個として予測するような感じにしたいです
現在のstage1とか2とか3にわけると問題点がそれぞれで発生して結局うまくいきません
また、以下のようなルールも適切に導入したいです

```
	温暖単体なら描かない
　	052512
	寒冷単体で出てて低気圧中心から遠いものは描かない
　	120518　082000　051500
　	051700(これは地形性か)
	低気圧中心があり、温暖がしっかり出ていれば、寒冷側が緑混じりでも寒冷として引く。
　	121100　121906
	低気圧中心や黄色よりも寒冷側に温暖が生えてる場合は寒冷とする
　	121512
	寒冷の後ろの短い停滞は、すべて寒冷に
	　121918　041506　101018
	　042700(これは省略してるけど伸ばしてもいい)
　	043000(気象庁は停滞だけど寒冷でも可)
	停滞の先に寒冷だけいる場合、すべて停滞に。
	　090118
	停滞に一部寒冷だけ混ざる場合、黄色や赤がいなければ停滞に
　	050200　050600　
	停滞の中の小さい赤青は、すべて停滞に。
　	061918
```

前線のデータは6クラス（前線なし=0, 温暖前線=1, 寒冷前線=2, 停滞前線=3, 閉塞前線=4, 温暖前線と寒冷前世の繋ぎ目=5）

私が現在考えている実装として、まずstage1のswin-unetで温暖前線と寒冷前線の繋ぎ目=5のみの予測を行って欲しいです
stage1の学習では、学習期間の正解の温暖前線と寒冷前線の繋ぎ目=5、および気象変数データを用いて学習
stage1の予測では、予測期間の気象変数データを用いて予測する感じです

この温暖前線と寒冷前世の繋ぎ目=5ですが、2×2の4マスの塊（もしくはほぼこのサイズ）の形をしています
あまりに大きい塊は中心部分で縮小、また1マス単体で散らばっているものは削除する論理処理をstage1.5として入れます

次にstage2において温暖前線と寒冷前線の予測を行います
stage2の学習では、学習期間の温暖前線=1, 寒冷前線=2、正解の温暖前線と寒冷前線の繋ぎ目=5、および気象変数データを用いて学習
stage2の予測では、stage1,1.5における予測期間の温暖前線と寒冷前線の繋ぎ目=5のデータと、気象変数データを用いて予測する感じです

その次にstage2.5の論理処理として、温暖前線と寒冷前世の繋ぎ目=5と繋がっている部分（繋ぎ目から前線ありのマスを通って繋がっていること）のみを残す処理をします
ここで、温暖前線のみのもの、寒冷前世のみのものは削除、さらに、温暖前線と寒冷前世の繋ぎ目=5において、温暖と寒冷のどっちともとも繋がっているもののみを残して、温暖や寒冷のどっちかしかついていないものは削除してください

stage3では閉塞前線を予測してください
stage3の学習では、学習期間の温暖前線=1, 寒冷前線=2、閉塞前線=4、正解の温暖前線と寒冷前線の繋ぎ目=5、および気象変数データを用いて学習
stage3の予測では、stage2,2.5における予測期間の温暖前線=1, 寒冷前線=2、温暖前線と寒冷前線の繋ぎ目=5のデータと、気象変数データを用いて予測する感じです

閉塞前線は温暖前線=1と寒冷前線=2の繋ぎ目あたり、もしくは温暖前線と寒冷前世の繋ぎ目=5から発生している必要があるので、stage3.5では温暖、寒冷、繋ぎ目のどれかにくっついている部分のみの閉塞前線以外は削除するようにしてください

stage4では停滞前線を予測してください
stage3の学習では、学習期間の温暖前線=1, 寒冷前線=2、停滞前線=3、閉塞前線=4、正解の温暖前線と寒冷前線の繋ぎ目=5、および気象変数データを用いて学習
stage3の予測では、stage3,3.5における予測期間の温暖前線=1, 寒冷前線=2、閉塞前線=4、温暖前線と寒冷前線の繋ぎ目=5のデータと、気象変数データを用いて予測する感じです

stege4.5では、停滞前線はそこそこ大きな前線なので、1マスのみの停滞前線や小さな塊ぐらいの停滞前線は削除するようにしてください
また、もし寒冷前線ピクセルに停滞前線がくっついた場合（隣接しており、辿れるもの）は寒冷前線に変更してください

上記の各ステージでは、前のステージの結果を入力とするようにしてください
stage1、2、3、4ごとにそれぞれのstageの目的に合うようにswin-unetを学習するようにしてください

上記の構成と、これまでのv3の内容から、main_v4及び関連v4のプログラムを新たに作成してください（現状のv3のプログラムは何も触らないでください）
以下のプログラムファイル、および必要に応じて新規にv4用のファイルを作成してください
src/FrontLine/main_v4/main_v4_stage4_5.py
src/FrontLine/main_v4/main_v4_stage3_5.py
src/FrontLine/main_v4/main_v4_stage2_5.py
src/FrontLine/main_v4/main_v4_stage1_5.py
src/FrontLine/main_v4/main_v4_stage4.py
src/FrontLine/main_v4/main_v4_stage3.py
src/FrontLine/main_v4/main_v4_stage2.py
src/FrontLine/main_v4/main_v4_stage1.py
src/FrontLine/main_v4/main_v4_models.py
src/FrontLine/main_v4/main_v4_datasets.py
src/FrontLine/main_v4/main_v4_config.py
src/FrontLine/main_v4.py
完璧なプログラムを作成してください
また自分のアルゴリズムが適切かどうかを日本語で判断して考察してください
日本語で解説
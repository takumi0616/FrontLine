私は前線予測システムを開発しているものです

/home/takumi/docker_miniconda/src/FrontLine/document/ascmo-5-147-2019.pdf
上記の資料を読み込んでください
新たに見つけた資料です
手法を詳しく理解して、手法の結果や精度をきちんと把握してください

以下のプログラムは私が作成しているものです
/home/takumi/docker_miniconda/src/FrontLine/main_v1.py
/home/takumi/docker_miniconda/src/FrontLine/main_v2.py
/home/takumi/docker_miniconda/src/FrontLine/swin_unet.py
/home/takumi/docker_miniconda/src/FrontLine/diffusion-model.py
以下が結果です
/home/takumi/docker_miniconda/src/FrontLine/v1_result
/home/takumi/docker_miniconda/src/FrontLine/v2_result

上記の資料を詳しく読み込んでください
私はmain_v3.pyを作成する予定です
その際の私が行いたい構成が以下です
```
Stage1（Swin-UNet）：入力は少数精鋭＋正規化＋none重み下げ＋（可能なら）focal。出力は確率6ch。
後処理：DL-FRONTと同じ「any-front確率→勾配/発散→骨格→MCP」でポリライン抽出。タイプは骨格上の最大確率で付与。
評価：front/noneのAUC、季節別通過頻度、距離評価。ピクセル混同行列も併記するが、主評価は前線の空間統計に置く。
Stage2は確率6chを入出力とする「確率校正（滑らか化）」に特化させる条件付き拡散＋PMM。
```
この構成が可能かどうかをチェックしてください、その後実装をお願いします
以下のプログラムを編集してv3を実装してください
/home/takumi/docker_miniconda/src/FrontLine/main_v3.py
/home/takumi/docker_miniconda/src/FrontLine/swin_unet_v3.py
/home/takumi/docker_miniconda/src/FrontLine/diffusion-model_v3.py
（v3の内容はv2からコピーしてきたものです）
段階的に作業を行い、完璧に行なってください
日本語で解説




Stage2の追加を行いたいです
Stage2では条件付きのdiffusion-modelを使用したいです
/home/takumi/docker_miniconda/src/FrontLine/diffusion-model.pyおよび/home/takumi/docker_miniconda/src/FrontLine/denoising_diffusion_pytorchの中身を全て見て内容を確認してください
その後、/home/takumi/docker_miniconda/src/FrontLine/main_v1.pyと/home/takumi/docker_miniconda/src/FrontLine/main_v2.pyを確認してください

追加したい構成として、まずdiffusion-modelの学習の仕方ですが、main_v1.pyにある人工的に歪にさせた正解の前線データを直すような感じで学習させたいです
正解のデータは少し太い前線（太さ2マスにしています）
正解のデータにおいて中心線をとってまずは太さ1マスにしてください